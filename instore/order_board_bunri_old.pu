title 注文

actor user
participant 外部サービス as external_service
participant core_sdk
box “Instore services”
participant instore
participant store_app
end box
box “POS-NEC services” #LightBlue
participant pos_nec_service
participant NEC_mPOS
end box
box “ Payment services” #Pink
participant payment_service
participant GMOPG
end box
actor staff
actor gig_staff

== 注文（正常系) ==
user -> external_service: 商品注文ポチ
external_service -> external_service: 注文番号・受取番号生成
alt 事前決済の場合
    external_service -> core_sdk: PaymentClientInterface::オンライン決済処理
    note right: 「決済処理の詳細は支払方法（クレカ・d払い）のそれぞれの決済シーケンスをご確認ください
    external_service <-- core_sdk: 成功
end

external_service -> core_sdk: 注文リクエスト\n(OrderClientInterface::order)
note left: 会計ステータスも添える。\n事前決済の場合は、instoreの会計ステータスは\n最初から会計完了になって送られる\nまた、いずれかの処理が失敗した場合、\nロールバックする必要があるので、\nロールバック用のメソッドも必要
core_sdk -> instore: 注文ボードに注文をPublish
note left
    brand_code, shop_code, 注文情報。
    注文を自動で承認するかどうかはアプリがKD設定から
    判断するため、サービスは一律で注文ボードに注文をPublishする。
end note
instore -> instore: 内部処理
instore -> store_app: 注文ストリームに注文を配信
store_app --> staff: 注文ボードに注文が乗ったことを通知
core_sdk <-- instore: 注文成功
external_service <-- core_sdk: 注文成功

user <- external_service: 注文完了画面(受取番号表示)

...

== 注文承認 ==
alt 手動承認の場合
    store_app <- staff: 注文承認ボタンを押下する
    instore <- store_app: 注文承認通知エンドポイントを叩く
    note left
        伝票番号をキーにする
    end note
    external_service <- instore: 承認通知
    instore -> store_app: 成功
else 自動承認の場合
    instore -> store_app: 承認ストリームに注文をSubscribe
    instore <- store_app: 注文承認通知エンドポイントを叩く
    external_service <- instore: 承認通知
    note left
        デバイス全台から叩かれるので、サービス側では注文にロックを入れるなどして対策を。
        トリドールサービスの場合は必ず自動承認。
    end note
    instore -> store_app: 成功
end

external_service -> external_service: 注文ステータス変更\n（承認済み or 却下)\n 受け取り番号採番
note left: 失敗した場合の処理は指定しておくべき

alt 注文が承認された場合
    external_service -> core_sdk: 注文確定IF(新設)
    core_sdk -> instore: 注文を注文ボードから調理ボードへ移動
    note left
        注文ボードからdelete objectし、
        調理ボードへadd objectする.
        同時にkitchen_statusをwaitingにするタグセットも行う.
    end note
    core_sdk <- instore: 成功
    external_service <- core_sdk: 成功
    user <- external_service: 注文受付メール
    instore -> store_app: Board objectの操作をsubscribe
else 注文が却下された場合
    external_service -> core_sdk: 注文却下IF(新設)
    core_sdk -> instore: 注文を注文ボードからDelete
    core_sdk <- instore: 成功
    external_service <- core_sdk: 成功
    user <- external_service: 注文却下メール
    instore -> store_app: Board objectの操作をsubscribe
end

== 調理開始 ==
alt 自動で調理開始時間n分前になったら変更
    instore <- store_app: 調理開始時刻タグセットをPublish(調理中)
    note left
        端末の数だけタグセットが叩かれる
    end note
    instore -> store_app: 調理開始時刻タグセットをSubscribe
else 手動で要調理への変更をする
    store_app <- staff: 要調理へカードを移動させる
    instore <- store_app: 調理開始時刻タグセットをPublish
    instore -> store_app: 調理開始時刻タグセットをSubscribe
end

...
staff -> staff: 調理

== 調理完了 ==
store_app <- staff: 調理完了ボタンを押す
instore <- store_app: 調理完了通知
external_service <- instore: 調理完了通知(SNS)
instore -> store_app: 成功
external_service -> external_service: サービス側の内部処理
user <- external_service: 調理完了メール

instore <- store_app: 調理完了時刻タグセットをPublish\n（お渡しまち）
instore -> store_app: 調理完了時刻タグセットをSubscribe

external_service -> core_sdk: 会計リクエスト\n(PosClientInterface::requestAccounting)
core_sdk -> pos_nec_service: 会計リクエスト
note left: brand_code, shop_code, 注文情報、合計金額, etc..
pos_nec_service -> pos_nec_service: 注文情報変換\n（tori -> mpos)
pos_nec_service -> NEC_mPOS: 会計連携
pos_nec_service <-- NEC_mPOS: 会計連携成功
core_sdk <-- pos_nec_service: 会計連携成功

== 会計・お渡し ==
user -> user: 来店

alt Store操作後、mPOS操作をする場合
        store_app <- staff: お渡し完了ボタンを押す
        instore <- store_app: お渡し完了日時タグセットをPublish\n（お渡し済み）
        instore -> store_app: お渡し完了日時タグセットをSubscribe
        external_service <- instore: お渡し完了通知
        instore -> store_app: 成功
        external_service -> external_service: サービス側の内部処理
        user <- external_service: お渡し完了メール
        NEC_mPOS <- staff: POS会計操作
        NEC_mPOS <- staff : 会計完了操作を実施する
        pos_nec_service <- NEC_mPOS: 会計完了通知
        external_service <- pos_nec_service: 取引完了通知
        external_service -> external_service: 取引完了処理（売上計上など）
        external_service -> core_sdk: 注文ステータス（取引完了）連携\n(ChangeStatusClientInterface::toTransactionDone)
        core_sdk -> instore: 伝票処理済みフラグONタグセット・ボードオブジェクトDeleteをPublish
        instore -> store_app: 伝票処理済みフラグONタグセット・ボードオブジェクトDeleteをSubscribe


else mPOS操作のみで会計処理する想定（調理ステータス：お渡し待ちのとき）
        NEC_mPOS <- staff : 会計を実施する
        pos_nec_service <- NEC_mPOS: 会計処理を実施する
        external_service <- pos_nec_service: 取引完了通知
        external_service -> external_service: 取引完了処理（売上計上など）
        external_service -> core_sdk: 注文ステータス（取引完了）連携\n(ChangeStatusClientInterface::toTransactionDone)
        core_sdk -> instore: 伝票処理済みフラグONタグセット・ボードオブジェクトDeleteをPublish
        instore -> store_app: 伝票処理済みフラグONタグセット・ボードオブジェクトDeleteをSubscribe
        instore <- store_app: お渡し完了日時タグセットをPublish\n（お渡し済み）
        note right
            お渡し完了日時タグがなければ、お渡し完了日時をPublishする処理になる
            Board objectをdeleteした後のタグセットが許容されるべきかが怪しい
        end note
        instore -> store_app: お渡し完了日時タグセットをSubscribe
        external_service <- instore: お渡し完了通知
        instore -> store_app: 成功
        external_service -> external_service: サービス側の内部処理
        user <- external_service: お渡し完了メール
end
user -> user: いただきます